name: Build and Run Odoo Containers

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - 'branch-*'

jobs:
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set PR ID as tag
  #       id: vars
  #       run: echo "tag=fb-pr-${{ github.event.number }}" >> $GITHUB_OUTPUT

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.tag }}

  run-containers:
    runs-on: ubuntu-latest
    # needs: build-and-push

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
              registry: ghcr.io
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Create Docker network
        run: docker network create -d bridge odoo_network
      
      - name: Run Postgres container
        run: |
          docker run -d \
            --network odoo_network \
            --name postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres_admin \
            -e POSTGRES_DB=postgres \
            -p 5432:5432 \
            postgres:15

          echo "Waiting for Postgres to be ready..."
          sleep 10

      - name: List GHCR tags and run containers
        id: lsghcr
        env:
          GHCR_OWNER: my-org
          IMAGE_NAME: my-app
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TOKEN=$GH_TOKEN
          IMAGE_PREFIX="ghcr.io/gldzzpro/odoo17"
          DEFAULT_PASS="odoo_pass"

          tags=$(curl -s -H "Authorization: Bearer $TOKEN" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/user/packages/container/odoo17/versions" \
                | jq -r '.[].metadata.container.tags[]? | select(startswith("fb-"))')
          
          echo "tags=$tags" >> "$GITHUB_OUTPUT"

          for tag in $tags; do
            echo "tag: $tag"
            dbname="db_${tag//-/_}"
            dbuser="user_${tag//-/_}"
            dbpass="$DEFAULT_PASS"

            echo "Creating DB and user in Postgres for tag $tag..."

            # Create user if not exists
            docker exec -i postgres psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname = '$dbuser'" | grep -q 1 \
              || docker exec -i postgres psql -U postgres -c "CREATE ROLE $dbuser LOGIN PASSWORD '$dbpass';"

            # Create DB if not exists
            docker exec -i postgres psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname = '$dbname'" | grep -q 1 \
              || docker exec -i postgres psql -U postgres -c "CREATE DATABASE $dbname OWNER $dbuser;"

            # Grant privileges
            docker exec -i postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $dbname TO $dbuser;"

            echo "Running Odoo container for tag $tag"

            docker run -d \
              --name "odoo_$tag" \
              --network odoo_network \
              -p 8069:8069 \
              -v ./custom_addons:/mnt/extra-addons:ro \
              -v odoo_$tag-data:/var/lib/odoo \
              "$IMAGE_PREFIX:$tag" \
              --db_host=postgres \
              --db_port=5432 \
              --db_user=$dbuser \
              --db_password=$dbpass \
              --database=$dbname \
              -i base,softifi_graph_module_dependency \
              --http-interface=0.0.0.0 \
              --proxy-mode

          done

          sleep 10
          docker ps

      - name: Get Docker instances
        id: docker_instances
        run: |
          echo "Tags are: ${{ steps.lsghcr.outputs.tags }}"

          tags="${{ steps.lsghcr.outputs.tags }}"
          DOCKER_INSTANCES=""
          for tag in $tags; do
            name="odoo_${tag}"
            url="http://${name}:8069"
            DOCKER_INSTANCES+="${name}:${url},"
          done

          # Remove trailing comma
          DOCKER_INSTANCES="${DOCKER_INSTANCES%,}"

          echo "Final DOCKER_INSTANCES: $DOCKER_INSTANCES"

          # Export for use in later steps
          echo "docker_instances=$DOCKER_INSTANCES" >> "$GITHUB_OUTPUT"
          
          # Copy test_api.sh into each Docker container, install jq, and make script executable
          echo "Preparing containers for API testing..."
          for tag in $tags; do
            container_name="odoo_${tag}"
            echo "Setting up $container_name for API testing"
            
            # Install curl in the container (if not already available)
            echo "Ensuring curl is available in $container_name"
            docker exec "$container_name" which curl || docker exec "$container_name" apt-get update && docker exec "$container_name" apt-get install -y curl || echo "Warning: Could not install curl in $container_name"
            
            # Install the custom graph module dependency addon
            echo "Installing softifi_graph_module_dependency addon in $container_name..."
            docker exec "$container_name" /usr/bin/odoo -d odoo --addons-path=/mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons -i softifi_graph_module_dependency --stop-after-init || echo "Warning: Could not install softifi_graph_module_dependency addon in $container_name"
            
            # Copy test script
            echo "Copying test_api.sh to $container_name"
            docker cp ./test_api.sh "$container_name":/test_api.sh || echo "Warning: Could not copy test_api.sh to $container_name"
            
            # Make script executable
            echo "Setting executable permissions for test_api.sh in $container_name"
            docker exec "$container_name" chmod +x /test_api.sh || echo "Warning: Could not set permissions in $container_name"
          done
      - name: Debug Odoo Module Installation and Test API
        run: |
            echo "üîç Starting comprehensive Odoo module and API testing..."
            
            # Set variables
            MODULE_NAME="softifi_graph_module_dependency"
            CONTAINER_NAME="odoo_fb-pr-"
            
            # Step 1: Wait for Odoo to be fully ready
            echo "‚è≥ Waiting for Odoo to be fully ready..."
            for i in {1..20}; do
              if docker exec $CONTAINER_NAME curl -s "http://localhost:8069/web/health" | grep -q "pass"; then
                echo "‚úÖ Odoo health check passed"
                break
              fi
              echo "Attempt $i/20: Odoo not ready yet, waiting 10 seconds..."
              sleep 10
            done
            
            # Step 2: Check if database exists and is accessible
            echo "üóÑÔ∏è Checking database connectivity..."
            DB_CHECK=$(docker exec $CONTAINER_NAME psql -h postgres -U user_fb_pr_ -d db_fb_pr_ -c "SELECT 1;" 2>/dev/null | grep -c "1" || echo "0")
            if [ "$DB_CHECK" = "1" ]; then
              echo "‚úÖ Database connection successful"
            else
              echo "‚ùå Database connection failed"
              echo "üìã Checking database logs:"
              docker logs postgres | tail -20
            fi
            
            # Step 3: Force module installation (this is likely the missing piece)
            echo "üîß Force installing module '$MODULE_NAME'..."
            docker exec $CONTAINER_NAME /usr/bin/odoo \
              --db_host=postgres \
              --db_port=5432 \
              --db_user=user_fb_pr_ \
              --db_password=odoo_pass \
              --database=db_fb_pr_ \
              --addons-path=/mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons \
              -i $MODULE_NAME \
              --stop-after-init \
              --no-http || echo "‚ö†Ô∏è Module installation had issues"
            
            # Step 4: Restart Odoo to ensure module is loaded
            echo "üîÑ Restarting Odoo container to load modules..."
            docker restart $CONTAINER_NAME
            
            # Wait for restart
            sleep 15
            
            # Step 5: Verify module is installed in database
            echo "‚úÖ Checking if module is installed in database..."
            MODULE_STATE=$(docker exec $CONTAINER_NAME psql -h postgres -U user_fb_pr_ -d db_fb_pr_ -t -c "SELECT state FROM ir_module_module WHERE name='$MODULE_NAME';" 2>/dev/null | xargs)
            echo "üìã Module '$MODULE_NAME' state: $MODULE_STATE"
            
            # Step 6: Check if HTTP controllers are loaded
            echo "üåê Checking available HTTP routes..."
            docker exec $CONTAINER_NAME /usr/bin/odoo \
              --db_host=postgres \
              --db_port=5432 \
              --db_user=user_fb_pr_ \
              --db_password=odoo_pass \
              --database=db_fb_pr_ \
              --addons-path=/mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons \
              --list-db \
              --stop-after-init 2>/dev/null | grep -i "route\|controller" || echo "No route info available"
            
            # Step 7: Test basic Odoo connectivity first
            echo "üè• Testing basic Odoo endpoints..."
            HEALTH_CHECK=$(docker exec $CONTAINER_NAME curl -s "http://localhost:8069/web/health" 2>/dev/null)
            echo "Health check response: $HEALTH_CHECK"
            
            DB_SELECTOR=$(docker exec $CONTAINER_NAME curl -s "http://localhost:8069/web/database/selector" 2>/dev/null | head -1)
            echo "Database selector response: $DB_SELECTOR"
            
            # Step 8: Test your custom API endpoints
            echo "üéØ Testing custom API endpoints..."
            
            # Test 1: Simple GET request
            echo "Testing GET /api/graph/category..."
            API_RESPONSE_1=$(docker exec $CONTAINER_NAME curl -s -w "\nHTTP_CODE:%{http_code}" "http://localhost:8069/api/graph/category" 2>/dev/null)
            HTTP_CODE_1=$(echo "$API_RESPONSE_1" | grep "HTTP_CODE:" | cut -d: -f2)
            RESPONSE_BODY_1=$(echo "$API_RESPONSE_1" | grep -v "HTTP_CODE:")
            echo "HTTP Code: $HTTP_CODE_1"
            echo "Response: $RESPONSE_BODY_1"
            
            # Test 2: POST with JSON-RPC
            echo "Testing POST /api/graph/category with JSON-RPC..."
            API_RESPONSE_2=$(docker exec $CONTAINER_NAME curl -s -w "\nHTTP_CODE:%{http_code}" \
              -X POST "http://localhost:8069/api/graph/category" \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "call",
                "params": {
                  "category_prefixes": ["Custom"],
                  "options": {
                    "exact_match": false,
                    "include_subcategories": true,
                    "max_depth": 0
                  }
                },
                "id": 1
              }' 2>/dev/null)
            HTTP_CODE_2=$(echo "$API_RESPONSE_2" | grep "HTTP_CODE:" | cut -d: -f2)
            RESPONSE_BODY_2=$(echo "$API_RESPONSE_2" | grep -v "HTTP_CODE:")
            echo "HTTP Code: $HTTP_CODE_2"
            echo "Response: $RESPONSE_BODY_2"
            
            # Step 9: Check Odoo logs for any errors
            echo "üìã Checking Odoo logs for errors..."
            docker logs $CONTAINER_NAME 2>&1 | grep -E "(ERROR|Exception|Traceback|$MODULE_NAME)" | tail -20 || echo "No relevant errors found"
            
            # Step 10: Check module files
            echo "üìÅ Checking module files..."
            if docker exec $CONTAINER_NAME test -d "/mnt/extra-addons/$MODULE_NAME"; then
              echo "‚úÖ Module directory exists"
              docker exec $CONTAINER_NAME ls -la "/mnt/extra-addons/$MODULE_NAME/"
              
              # Check for controllers
              echo "üîç Looking for controller files..."
              docker exec $CONTAINER_NAME find "/mnt/extra-addons/$MODULE_NAME" -name "*.py" -exec grep -l "Controller\|@http.route" {} \; || echo "No controller files found"
            else
              echo "‚ùå Module directory not found"
            fi
            
            # Step 11: Final summary
            echo "üìä TEST SUMMARY:"
            echo "- Module state in DB: $MODULE_STATE"
            echo "- API GET response code: $HTTP_CODE_1"
            echo "- API POST response code: $HTTP_CODE_2"
            
            if [ "$HTTP_CODE_1" = "200" ] || [ "$HTTP_CODE_2" = "200" ]; then
              echo "‚úÖ SUCCESS: At least one API endpoint is working"
            else
              echo "‚ùå FAILURE: API endpoints are not accessible"
              echo "üîç This suggests the module is not properly installed or controllers are not loaded"
            fi
      - name: Test API Connectivity
        run: |
          echo "Testing API connectivity to Odoo containers..."
          tags="${{ steps.lsghcr.outputs.tags }}"
          
          for tag in $tags; do
            container_name="odoo_${tag}"
            echo "Testing connectivity to $container_name..."
            
            # Wait for Odoo to be ready
            echo "Waiting for Odoo in $container_name to be ready..."
            for i in {1..30}; do
              if docker exec "$container_name" curl -s "http://localhost:8069/web/database/selector" >/dev/null 2>&1; then
                echo "‚úÖ Odoo in $container_name is ready"
                break
              fi
              echo "Waiting for Odoo in $container_name... ($i/30)"
              sleep 5
            done
            
            # Test basic connectivity from within the container
            echo "Testing basic API endpoint from within $container_name..."
            docker exec "$container_name" curl -s "http://localhost:8069/api/graph/category" -H "Content-Type: application/json" -d '{
              "jsonrpc": "2.0",
              "method": "call",
              "params": {
                "category_prefixes": ["Custom"],
                "options": {
                  "exact_match": false,
                  "include_subcategories": true,
                  "max_depth": 0
                }
              },
              "id": null
            }' || echo "Warning: API test failed for $container_name"
            
            # Test network connectivity between containers
             echo "Testing network connectivity from $container_name to other containers..."
             docker exec "$container_name" curl -s "http://$container_name:8069/web/database/selector" >/dev/null 2>&1 && echo "‚úÖ Network connectivity working for $container_name" || echo "‚ùå Network connectivity failed for $container_name"
           done
           
           # Run the full test_api.sh script from the first container
           first_tag=$(echo "$tags" | head -n1)
           if [ -n "$first_tag" ]; then
             first_container="odoo_${first_tag}"
             echo "Running full API test script from $first_container..."
             docker exec "$first_container" /test_api.sh || echo "Warning: Full API test script failed in $first_container"
           fi
      

      # - name: Log in to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Run Graph-SYNC Project
      #   run: |
      #       docker_instances="${{ steps.docker_instances.outputs.docker_instances }}"
      #       echo "docker_instances: $docker_instances"
      #       docker run -d --network odoo_network \
      #         --name graph_sync \
      #         -p 8000:8000 \
      #         -e DOCKER_INSTANCES="$docker_instances" \
      #         -e LOG_LEVEL="INFO" \
      #         ghcr.io/gldzzpro/graph_sync:latest
            

      #       sleep 10 

      #       docker ps

      #       echo "üîÑ Starting Neo4j Sync container..."
      #       docker run -d \
      #         --name neo4j_sync \
      #         --network odoo_network \
      #         -p 8001:8000 \
      #         -e NEO4J_URI="neo4j+s://6e0e193c.databases.neo4j.io" \
      #         -e NEO4J_USERNAME="neo4j" \
      #         -e NEO4J_PASSWORD="5EFKS7g0FDIbNCSexts91WZJfkufYSKxw6FcJPoZOro" \
      #         -e LOG_LEVEL="DEBUG" \
      #         ghcr.io/gldzzpro/neo4j_sync:latest
            
      #       echo "Waiting for Neo4j Sync to be ready..."
      #       sleep 10
            
      #       echo "‚úÖ Neo4j Sync container started"
      #       docker ps

      #       # Docker service URLs (accessible within network)
      #       GRAPHSYNC_URL="http://graph_sync:8000"
      #       NEO4J_SYNC_URL="http://neo4j_sync:8000"
            
      #       echo "üê≥ Testing services in Docker environment..."
            
      #       # Check if services are running
      #       echo "üîç Checking if services are running..."
            
      #       # Wait for GraphSync to be ready
      #       echo "Checking GraphSync service..."
      #       for i in {1..30}; do
      #         if docker exec graph_sync curl -s "$GRAPHSYNC_URL/healthcheck" >/dev/null 2>&1; then
      #           echo "‚úÖ GraphSync service is running"
      #           break
      #         fi
      #         echo "Waiting for GraphSync... ($i/30)"
      #         sleep 2
      #       done
            
      #       # Wait for Neo4j Sync to be ready
      #       echo "Checking Neo4j Sync service..."
      #       for i in {1..30}; do
      #         if docker exec neo4j_sync curl -s "$NEO4J_SYNC_URL/healthcheck" >/dev/null 2>&1; then
      #           echo "‚úÖ Neo4j Sync service is running"
      #           break
      #         fi
      #         echo "Waiting for Neo4j Sync... ($i/30)"
      #         sleep 2
      #       done
            
      #       echo "‚úÖ Both services are running"
            
      #       # Trigger sync operation
      #       echo "üîÑ Triggering sync operation..."
      #       SYNC_RESPONSE=$(docker exec graph_sync curl -s -X POST "$GRAPHSYNC_URL/trigger" \
      #         -H "Content-Type: application/json" \
      #         -d '{"category_prefixes": ["Custom"], "include_reverse": true, "options": {"exact_match": false, "include_subcategories": true, "max_depth": null, "stop_domains": [], "exclude_domains": []}}')
            
      #       echo "üìä Sync response: $SYNC_RESPONSE"
            
      #       # Send to Neo4j
      #       echo "üîÑ Sending to Neo4j..."
      #       INGEST_PAYLOAD=$(echo "$SYNC_RESPONSE" | jq '{responses: .}')
      #       INGEST_RESPONSE=$(docker exec neo4j_sync curl -s -X POST "$NEO4J_SYNC_URL/api/graph/ingest" \
      #         -H "Content-Type: application/json" \
      #         -d "$INGEST_PAYLOAD")
            
      #       echo "üìä Neo4j response: $INGEST_RESPONSE"
      #       echo "‚úÖ Docker test completed successfully!"
      #       echo "Getting logs from containers"
      #       docker logs graph_sync
      #       docker logs neo4j_sync
      #       # Final status check
      #       echo "üìã Final container status:"
      #       docker ps --filter "network=odoo_network" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"


          
