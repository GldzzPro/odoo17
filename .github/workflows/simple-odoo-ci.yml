name: Simple Odoo CI/CD

on:
  push:
    branches:
      - branch-a
      - branch-b
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create simple docker-compose.yml
        run: |
          cat > docker-compose.simple.yml << EOF
          version: '3.8'
          services:
            postgres:
              image: postgres:15
              environment:
                POSTGRES_DB: odoo
                POSTGRES_USER: odoo
                POSTGRES_PASSWORD: odoo
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U odoo"]
                interval: 10s
                timeout: 5s
                retries: 5

            odoo:
              build:
                context: .
                dockerfile: Dockerfile
              command: -- --db_host=postgres --db_port=5432 --db_user=odoo --db_password=odoo --database=odoo --test-enable --stop-after-init
              depends_on:
                postgres:
                  condition: service_healthy
              ports:
                - "8069:8069"
              environment:
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_USER=odoo
                - DB_PASSWORD=odoo
                - DB_NAME=odoo
              volumes:
                - ./addons:/mnt/extra-addons:ro
          EOF

      - name: Start services
        run: docker-compose -f docker-compose.simple.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until docker-compose -f docker-compose.simple.yml exec -T postgres pg_isready -U odoo; do sleep 2; done'
          echo "Waiting for Odoo..."
          sleep 30

      - name: Check Odoo logs
        run: |
          docker-compose -f docker-compose.simple.yml logs odoo
          
      - name: Test basic functionality
        run: |
          # Simple health check
          curl -f http://localhost:8069/web/health || echo "Health check failed but continuing..."
          
      - name: Check for dependency issues
        id: dependency_check
        run: |
          # Simple dependency analysis
          LOGS=$(docker-compose -f docker-compose.simple.yml logs odoo 2>&1)
          if echo "$LOGS" | grep -i "error\|exception\|failed" | grep -v "test"; then
            echo "dependency_issues=true" >> $GITHUB_OUTPUT
            echo "Issues found in logs:"
            echo "$LOGS" | grep -i "error\|exception\|failed" | head -10
          else
            echo "dependency_issues=false" >> $GITHUB_OUTPUT
            echo "No critical issues found"
          fi

      - name: Send email notification
        if: always()
        run: |
          # Determine status
          if [[ "${{ steps.dependency_check.outputs.dependency_issues }}" == "true" ]]; then
            STATUS="❌ Issues Detected"
            DETAILS="Dependency or runtime issues found in Odoo logs. Please check the workflow logs for details."
          else
            STATUS="✅ Success"
            DETAILS="All checks passed successfully."
          fi
          
          # Create email content
          SUBJECT="Odoo CI/CD: $STATUS - Branch ${{ github.ref_name }}"
          BODY=$(cat <<EOF
Odoo CI/CD Pipeline Results

Status: $STATUS
Branch: ${{ github.ref_name }}
Commit: ${{ github.sha }}
Author: ${{ github.actor }}
Workflow: ${{ github.workflow }}
Run: ${{ github.run_number }}

Details: $DETAILS

View full logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
EOF
)
          
          # Send email using the Python script
          python3 scripts/send_email.py "$SUBJECT" "$BODY" "golden.farhat@gmail.com"
          
          # Alternative: Simple curl-based email (requires email service setup)
          # Uncomment and configure one of these options:
          
          # Option 1: Formspree (free, easy setup)
          # curl -X POST https://formspree.io/f/YOUR_FORM_ID \
          #   -H "Content-Type: application/json" \
          #   -d '{"email":"golden.farhat@gmail.com","subject":"'"$SUBJECT"'","message":"'"$BODY"'"}'
          
          # Option 2: SendGrid API (requires API key)
          # curl -X POST https://api.sendgrid.v3/mail/send \
          #   -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"personalizations":[{"to":[{"email":"golden.farhat@gmail.com"}]}],"from":{"email":"noreply@yourdomain.com"},"subject":"'"$SUBJECT"'","content":[{"type":"text/plain","value":"'"$BODY"'"}]}'

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.simple.yml down -v
          docker system prune -f