# Improved Odoo CI/CD Workflow with Debugging and Best Practices
# This workflow includes:
# - Proper action version pinning
# - Debug steps for troubleshooting
# - Timeout protection
# - Better error handling
# - Local testing support with act

name: Simple Odoo CI/CD - Improved

on:
  push:
    branches:
      - branch-a
      - branch-b
  pull_request:
    branches:
      - main
      - develop

# Global environment variables
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hanging jobs
    
    steps:
      # Debug step - Environment inspection
      - name: Debug - Environment Info
        run: |
          echo "=== Environment Variables ==="
          printenv | sort
          echo "=== System Info ==="
          uname -a
          docker --version
          docker-compose --version
          echo "=== Disk Space ==="
          df -h
          echo "=== Memory Info ==="
          free -h

      # Use pinned action versions for stability
      - name: Checkout code
        uses: actions/checkout@v4  # Latest stable version
        with:
          fetch-depth: 0  # Full history for better debugging

      # Debug step - Repository inspection
      - name: Debug - Repository Structure
        run: |
          echo "=== Repository Root ==="
          ls -la
          echo "=== Addons Directory ==="
          ls -la addons/ | head -20
          echo "=== Scripts Directory ==="
          ls -la scripts/
          echo "=== Docker Files ==="
          ls -la *docker* *Docker* 2>/dev/null || echo "No Docker files found"

      # Install Docker Compose with version pinning
      - name: Install Docker Compose
        run: |
          # Use specific version for reproducibility
          DOCKER_COMPOSE_VERSION="2.21.0"
          sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Create improved docker-compose.yml with better health checks
      - name: Create docker-compose configuration
        run: |
          cat > docker-compose.simple.yml << 'EOF'
          version: '3.8'
          
          services:
            postgres:
              image: postgres:15-alpine  # Use alpine for smaller size
              environment:
                POSTGRES_DB: odoo
                POSTGRES_USER: odoo
                POSTGRES_PASSWORD: odoo
                POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U odoo -d odoo"]
                interval: 10s
                timeout: 5s
                retries: 10
                start_period: 30s
              restart: unless-stopped

            odoo:
              build:
                context: .
                dockerfile: Dockerfile
              command: >
                bash -c "
                  echo 'Starting Odoo with test mode...' &&
                  odoo --db_host=postgres 
                       --db_port=5432 
                       --db_user=odoo 
                       --db_password=odoo 
                       --database=odoo 
                       --test-enable 
                       --stop-after-init 
                       --log-level=info 
                       --logfile=/var/log/odoo/odoo.log
                "
              depends_on:
                postgres:
                  condition: service_healthy
              ports:
                - "8069:8069"
              environment:
                - DB_HOST=postgres
                - DB_PORT=5432
                - DB_USER=odoo
                - DB_PASSWORD=odoo
                - DB_NAME=odoo
                - ODOO_RC=/etc/odoo/odoo.conf
              volumes:
                - ./addons:/mnt/extra-addons:ro
                - odoo_logs:/var/log/odoo
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8069/web/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 60s
              restart: unless-stopped

          volumes:
            postgres_data:
            odoo_logs:
          EOF
          
          echo "=== Generated docker-compose.yml ==="
          cat docker-compose.simple.yml

      # Start services with better error handling
      - name: Start services
        run: |
          echo "Starting Docker services..."
          docker-compose -f docker-compose.simple.yml up -d
          
          echo "=== Service Status ==="
          docker-compose -f docker-compose.simple.yml ps
          
          echo "=== Docker Images ==="
          docker images
          
          echo "=== Docker Networks ==="
          docker network ls

      # Improved health check with timeout and better logging
      - name: Wait for services to be ready
        timeout-minutes: 10
        run: |
          echo "Waiting for PostgreSQL to be healthy..."
          timeout 300 bash -c '
            while ! docker-compose -f docker-compose.simple.yml exec -T postgres pg_isready -U odoo -d odoo; do
              echo "PostgreSQL not ready yet, waiting..."
              sleep 5
            done
          '
          echo "PostgreSQL is ready!"
          
          echo "Checking Odoo container status..."
          docker-compose -f docker-compose.simple.yml ps odoo
          
          echo "Waiting for Odoo to complete initialization..."
          timeout 600 bash -c '
            while docker-compose -f docker-compose.simple.yml ps odoo | grep -q "Up"; do
              echo "Odoo still running, waiting for completion..."
              sleep 10
            done
          '
          echo "Odoo initialization completed!"

      # Enhanced log checking with better parsing
      - name: Check Odoo logs
        run: |
          echo "=== PostgreSQL Logs ==="
          docker-compose -f docker-compose.simple.yml logs postgres | tail -50
          
          echo "=== Odoo Logs ==="
          docker-compose -f docker-compose.simple.yml logs odoo
          
          echo "=== Container Status ==="
          docker-compose -f docker-compose.simple.yml ps
          
          echo "=== Docker System Info ==="
          docker system df

      # Improved dependency analysis with structured output
      - name: Check for dependency issues
        id: dependency_check
        run: |
          echo "Analyzing Odoo logs for issues..."
          
          # Get logs and analyze
          ODOO_LOGS=$(docker-compose -f docker-compose.simple.yml logs odoo 2>&1)
          POSTGRES_LOGS=$(docker-compose -f docker-compose.simple.yml logs postgres 2>&1)
          
          # Check for critical errors
          CRITICAL_ERRORS=$(echo "$ODOO_LOGS" | grep -i "critical\|fatal" | grep -v "test" || true)
          ERRORS=$(echo "$ODOO_LOGS" | grep -i "error" | grep -v "test\|warning" || true)
          EXCEPTIONS=$(echo "$ODOO_LOGS" | grep -i "exception\|traceback" | grep -v "test" || true)
          
          # Check for successful completion
          SUCCESS_PATTERN="odoo.modules.loading: Modules loaded"
          if echo "$ODOO_LOGS" | grep -q "$SUCCESS_PATTERN"; then
            echo "‚úÖ Odoo modules loaded successfully"
            MODULE_LOAD_SUCCESS=true
          else
            echo "‚ùå Odoo modules did not load properly"
            MODULE_LOAD_SUCCESS=false
          fi
          
          # Determine overall status
          if [[ -n "$CRITICAL_ERRORS" ]] || [[ -n "$EXCEPTIONS" ]] || [[ "$MODULE_LOAD_SUCCESS" == "false" ]]; then
            echo "dependency_issues=true" >> $GITHUB_OUTPUT
            echo "‚ùå Issues detected in Odoo startup"
            
            if [[ -n "$CRITICAL_ERRORS" ]]; then
              echo "Critical Errors:"
              echo "$CRITICAL_ERRORS" | head -5
            fi
            
            if [[ -n "$EXCEPTIONS" ]]; then
              echo "Exceptions:"
              echo "$EXCEPTIONS" | head -5
            fi
            
            if [[ -n "$ERRORS" ]]; then
              echo "Other Errors:"
              echo "$ERRORS" | head -10
            fi
          else
            echo "dependency_issues=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No critical issues found"
          fi
          
          # Save logs for artifacts
          mkdir -p logs
          echo "$ODOO_LOGS" > logs/odoo.log
          echo "$POSTGRES_LOGS" > logs/postgres.log

      # Upload logs as artifacts for debugging
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: odoo-logs-${{ github.run_number }}
          path: logs/
          retention-days: 7

      # Enhanced email notification with better formatting
      - name: Send email notification
        if: always()
        run: |
          # Determine status with emoji
          if [[ "${{ steps.dependency_check.outputs.dependency_issues }}" == "true" ]]; then
            STATUS="‚ùå Issues Detected"
            DETAILS="Dependency or runtime issues found in Odoo logs. Please check the workflow logs and artifacts for details."
            PRIORITY="HIGH"
          else
            STATUS="‚úÖ Success"
            DETAILS="All checks passed successfully. Odoo modules loaded without critical issues."
            PRIORITY="NORMAL"
          fi
          
          # Create structured email content
          SUBJECT="[${PRIORITY}] Odoo CI/CD: $STATUS - Branch ${{ github.ref_name }}"
          BODY=$(cat <<EOF
          üîß Odoo CI/CD Pipeline Results
          
          üìä Status: $STATUS
          üåø Branch: ${{ github.ref_name }}
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          üîÑ Workflow: ${{ github.workflow }}
          üèÉ Run: ${{ github.run_number }}
          ‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          üìã Details: $DETAILS
          
          üîó View full logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          üì¶ Download artifacts: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts
          
          ---
          This is an automated message from the Odoo CI/CD pipeline.
          EOF
          )
          
          # Try to send email using Python script
          if [[ -f "scripts/send_email.py" ]]; then
            echo "Sending email using Python script..."
            python3 scripts/send_email.py "$SUBJECT" "$BODY" "golden.farhat@gmail.com" || echo "Email sending failed, but continuing..."
          else
            echo "Email script not found, skipping email notification"
          fi
          
          # Log the notification content for debugging
          echo "=== Email Content ==="
          echo "Subject: $SUBJECT"
          echo "Body: $BODY"

      # Comprehensive cleanup with error handling
      - name: Cleanup
        if: always()
        run: |
          echo "Starting cleanup..."
          
          # Stop and remove containers
          docker-compose -f docker-compose.simple.yml down -v --remove-orphans || echo "Compose down failed, continuing..."
          
          # Clean up Docker resources
          docker system prune -f --volumes || echo "Docker prune failed, continuing..."
          
          # Remove any dangling images
          docker image prune -f || echo "Image prune failed, continuing..."
          
          echo "=== Final Docker Status ==="
          docker ps -a
          docker images
          docker volume ls
          
          echo "Cleanup completed!"